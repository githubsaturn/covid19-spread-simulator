{"version":3,"sources":["utils/Utils.ts","redux/reducers/index.ts","redux/reducers/GlobalReducer.ts","redux/actions/GlobalActions.ts","containers/InputDataForm.tsx","containers/DataChart.tsx","calculator/Models.ts","calculator/Calculator.ts","containers/ModelDescription.tsx","containers/PageRoot.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["copyObject","obj","JSON","parse","stringify","isMobile","window","innerWidth","getDelayedPromise","time","Promise","res","rej","setTimeout","resolve","rootReducer","combineReducers","globalReducer","state","action","type","Utils","InputDataForm","Component","render","self","this","formInputData","props","gutter","align","justify","xs","span","lg","style","maxWidth","min","max","value","closeCircleSize","onChange","e","innerData","Number","target","updateModel","randomPeopleMetDaily","dayWithoutSymptoms","dayWithSymptoms","suffix","chanceOfDangerousContactWithCloseCirclePreSymptoms","newVal","chanceOfDangerousContactWithCloseCirclePostSymptoms","chanceOfDangerousContactWithRandomPeoplePreSymptoms","chanceOfDangerousContactWithRandomPeoplePostSymptoms","DataChart","PureComponent","opacity","uv","pv","handleMouseEnter","o","dataKey","setState","handleMouseLeave","sickCountAtDay","length","height","data","index","element","push","x","hypotheticalHealthCareCapacity","totalInfectedPercent","totalCases","activeCases","activeCaseCount","console","log","width","margin","top","right","left","bottom","strokeDasharray","label","angle","dy","tick","domain","onMouseEnter","onMouseLeave","name","strokeOpacity","stroke","activeDot","r","PersonState","Calculator","constructor","inputParams","people","dayNow","entirePopulationSize","NORMAL","initialSickPopulation","randomPerson","getRandomBound","SICK","dayGotSick","startInclusive","endExclusive","Math","floor","random","runOneDay","runOneDayForPatient","makePersonSick","closeIndex","patientIndex","closeCircleSizePlusOne","daysGotSick","Error","indexInDanger","POST_SICK","ModelDescription","rel","href","aria-label","title","src","scrolling","frameBorder","createInputDescription","description","PageRoot","super","mainContainer","updateDimensions","emitSizeChanged","React","createRef","collapsed","runSimulation","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","location","pathname","componentDidMount","addEventListener","simulationRuns","i","calculator","sickPeopleCount","filter","it","day","sumSickAtDay","forEach","avgAtDay","map","newAtDay","pop","before","simulationResult","totalSickDays","key","rootElementKey","ref","padding","onClick","shape","icon","size","connect","payload","createStoreWithMiddleware","applyMiddleware","thunk","createStore","App","store","reducers","path","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60494155.chunk.js","sourcesContent":["export default {\n    copyObject<T>(obj: T): T {\n        return JSON.parse(JSON.stringify(obj)) as T\n    },\n\n    isMobile() {\n        return window.innerWidth < 768\n    },\n\n    getDelayedPromise(time: number) {\n        if (!time) {\n            return Promise.resolve()\n        }\n\n        return new Promise<void>((res, rej) => {\n            setTimeout(() => {\n                res()\n            }, time)\n        })\n    }\n}\n","import { combineReducers } from 'redux'\nimport GlobalReducer from './GlobalReducer'\n\nconst rootReducer = combineReducers({\n    globalReducer: GlobalReducer\n})\n\nexport default rootReducer\n","import { SIZE_CHANGED } from '../actions/GlobalActions'\nimport Utils from '../../utils/Utils'\n\nexport default function(state = {}, action: { payload: any; type: string }) {\n    switch (action.type) {\n        case SIZE_CHANGED:\n            return { ...state, isMobile: Utils.isMobile() }\n        default:\n            return state\n    }\n}\n","export const SIZE_CHANGED = 'SIZE_CHANGED'\n\nexport function emitSizeChanged() {\n    return {\n        type: SIZE_CHANGED,\n        payload: {}\n    }\n}\n","import { Col, Input, Row } from 'antd'\nimport React, { Component } from 'react'\nimport Utils from '../utils/Utils'\nimport { InputParams } from '../calculator/Models'\n\nexport default class InputDataForm extends Component<{\n    formInputData: InputParams\n    updateModel: (formInputData: InputParams) => void\n}> {\n    render() {\n        const self = this\n        const formInputData = this.props.formInputData\n        return (\n            <div>\n                <Row type=\"flex\" gutter={20} align=\"bottom\" justify=\"center\">\n                    <Col xs={{ span: 12 }} lg={{ span: 4 }}>\n                        Close Circle Size\n                        <Row>\n                            <Input\n                                style={{ maxWidth: 100 }}\n                                type=\"number\"\n                                min={0}\n                                max={100}\n                                value={formInputData.closeCircleSize || ''}\n                                onChange={e => {\n                                    const innerData = Utils.copyObject(this.props.formInputData)\n                                    innerData.closeCircleSize = Number(e.target.value)\n                                    self.props.updateModel(innerData)\n                                }}\n                            />\n                        </Row>\n                    </Col>\n\n                    <Col xs={{ span: 12 }} lg={{ span: 4 }}>\n                        Random People Met Daily\n                        <Row>\n                            <Input\n                                style={{ maxWidth: 100 }}\n                                type=\"number\"\n                                min={0}\n                                max={100}\n                                value={formInputData.randomPeopleMetDaily || ''}\n                                onChange={e => {\n                                    const innerData = Utils.copyObject(this.props.formInputData)\n                                    innerData.randomPeopleMetDaily = Number(e.target.value)\n                                    self.props.updateModel(innerData)\n                                }}\n                            />\n                        </Row>\n                    </Col>\n\n                    <Col xs={{ span: 12 }} lg={{ span: 4 }}>\n                        Infected days without symptoms\n                        <Row>\n                            <Input\n                                style={{ maxWidth: 100 }}\n                                type=\"number\"\n                                min={0}\n                                max={100}\n                                value={formInputData.dayWithoutSymptoms || ''}\n                                onChange={e => {\n                                    const innerData = Utils.copyObject(this.props.formInputData)\n                                    innerData.dayWithoutSymptoms = Number(e.target.value)\n                                    self.props.updateModel(innerData)\n                                }}\n                            />\n                        </Row>\n                    </Col>\n\n                    <Col xs={{ span: 12 }} lg={{ span: 4 }}>\n                        Infected days after showing symptoms\n                        <Row>\n                            <Input\n                                style={{ maxWidth: 100 }}\n                                type=\"number\"\n                                min={0}\n                                max={100}\n                                value={formInputData.dayWithSymptoms || ''}\n                                onChange={e => {\n                                    const innerData = Utils.copyObject(this.props.formInputData)\n                                    innerData.dayWithSymptoms = Number(e.target.value)\n                                    self.props.updateModel(innerData)\n                                }}\n                            />\n                        </Row>\n                    </Col>\n                </Row>\n                <br />\n                <Row type=\"flex\" gutter={20} align=\"bottom\" justify=\"center\">\n                    <p>\n                        <i>All chance percentages below are per person per day</i>\n                    </p>\n                </Row>\n                <Row type=\"flex\" gutter={20} align=\"bottom\" justify=\"center\">\n                    <Col xs={{ span: 12 }} lg={{ span: 4 }}>\n                        {`%`} Chance of infecting close contact before becoming symptomatic\n                        <Row>\n                            <Input\n                                style={{ maxWidth: 100 }}\n                                type=\"number\"\n                                suffix=\"%\"\n                                min={0}\n                                max={100}\n                                value={formInputData.chanceOfDangerousContactWithCloseCirclePreSymptoms || ''}\n                                onChange={e => {\n                                    const innerData = Utils.copyObject(this.props.formInputData)\n                                    let newVal = Number(e.target.value)\n                                    if (newVal > 100) {\n                                        newVal = 100\n                                    }\n                                    innerData.chanceOfDangerousContactWithCloseCirclePreSymptoms = newVal\n                                    self.props.updateModel(innerData)\n                                }}\n                            />\n                        </Row>\n                    </Col>\n\n                    <Col xs={{ span: 12 }} lg={{ span: 4 }}>\n                        {`%`} Chance of infecting close contact after becoming symptomatic\n                        <Row>\n                            <Input\n                                style={{ maxWidth: 100 }}\n                                type=\"number\"\n                                suffix=\"%\"\n                                min={0}\n                                max={100}\n                                value={formInputData.chanceOfDangerousContactWithCloseCirclePostSymptoms || ''}\n                                onChange={e => {\n                                    const innerData = Utils.copyObject(this.props.formInputData)\n                                    let newVal = Number(e.target.value)\n                                    if (newVal > 100) {\n                                        newVal = 100\n                                    }\n                                    innerData.chanceOfDangerousContactWithCloseCirclePostSymptoms = newVal\n                                    self.props.updateModel(innerData)\n                                }}\n                            />\n                        </Row>\n                    </Col>\n\n                    <Col xs={{ span: 12 }} lg={{ span: 4 }}>\n                        {`%`} Chance of infecting random contact before becoming symptomatic\n                        <Row>\n                            <Input\n                                style={{ maxWidth: 100 }}\n                                type=\"number\"\n                                suffix=\"%\"\n                                min={0}\n                                max={100}\n                                value={formInputData.chanceOfDangerousContactWithRandomPeoplePreSymptoms || ''}\n                                onChange={e => {\n                                    const innerData = Utils.copyObject(this.props.formInputData)\n                                    let newVal = Number(e.target.value)\n                                    if (newVal > 100) {\n                                        newVal = 100\n                                    }\n                                    innerData.chanceOfDangerousContactWithRandomPeoplePreSymptoms = newVal\n                                    self.props.updateModel(innerData)\n                                }}\n                            />\n                        </Row>\n                    </Col>\n\n                    <Col xs={{ span: 12 }} lg={{ span: 4 }}>\n                        {`%`} Chance of infecting random person after becoming symptomatic\n                        <Row>\n                            <Input\n                                style={{ maxWidth: 100 }}\n                                type=\"number\"\n                                suffix=\"%\"\n                                min={0}\n                                max={100}\n                                value={formInputData.chanceOfDangerousContactWithRandomPeoplePostSymptoms || ''}\n                                onChange={e => {\n                                    const innerData = Utils.copyObject(this.props.formInputData)\n                                    let newVal = Number(e.target.value)\n                                    if (newVal > 100) {\n                                        newVal = 100\n                                    }\n                                    innerData.chanceOfDangerousContactWithRandomPeoplePostSymptoms = newVal\n                                    self.props.updateModel(innerData)\n                                }}\n                            />\n                        </Row>\n                    </Col>\n                </Row>\n                <br />\n            </div>\n        )\n    }\n}\n","import React, { PureComponent } from 'react'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, ResponsiveContainer } from 'recharts'\nimport { Col, Row } from 'antd'\nimport { SimulationPoint } from '../calculator/Models'\n\nexport default class DataChart extends PureComponent<\n    {\n        sickCountAtDay: SimulationPoint[]\n    },\n    any\n> {\n    state = {\n        opacity: {\n            uv: 1,\n            pv: 1\n        }\n    }\n\n    handleMouseEnter = (o: any) => {\n        const { dataKey } = o\n        const { opacity } = this.state\n\n        this.setState({\n            opacity: { ...opacity, [dataKey]: 0.5 }\n        })\n    }\n\n    handleMouseLeave = (o: any) => {\n        const { dataKey } = o\n        const { opacity } = this.state\n\n        this.setState({\n            opacity: { ...opacity, [dataKey]: 1 }\n        })\n    }\n\n    render() {\n        const { opacity } = this.state\n\n        if (!this.props.sickCountAtDay.length) {\n            return <div style={{ height: 350 }} />\n        }\n\n        const data: Array<{\n            x: number\n            hypotheticalHealthCareCapacity: number\n            totalInfectedPercent: number\n            activeCases: number\n        }> = []\n        for (let index = 0; index < this.props.sickCountAtDay.length; index++) {\n            const element = this.props.sickCountAtDay[index]\n            data.push({\n                x: index,\n                hypotheticalHealthCareCapacity: 25,\n                totalInfectedPercent: element.totalCases,\n                activeCases: element.activeCaseCount\n            })\n        }\n        console.log(data)\n\n        return (\n            <div>\n                <Row>\n                    <Col lg={{ span: 24 }}>\n                        <ResponsiveContainer height={350} width=\"100%\">\n                            <LineChart\n                                data={data}\n                                margin={{\n                                    top: 5,\n                                    right: 30,\n                                    left: 20,\n                                    bottom: 5\n                                }}\n                            >\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <XAxis label=\"Day\" angle={45} dy={10} height={80} dataKey=\"x\" />\n                                <YAxis\n                                    label={{ value: 'Number of Cases', angle: -90 }}\n                                    tick={false}\n                                    domain={[0, 100]}\n                                />\n                                <Legend onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave} />\n                                <Line\n                                    name=\"Total Infected\"\n                                    type=\"monotone\"\n                                    dataKey=\"totalInfectedPercent\"\n                                    strokeOpacity={opacity.pv}\n                                    stroke=\"#8884d8\"\n                                    activeDot={{ r: 8 }}\n                                />\n                                <Line\n                                    name=\"Ongoing Cases\"\n                                    type=\"monotone\"\n                                    dataKey=\"activeCases\"\n                                    strokeOpacity={opacity.uv}\n                                    stroke=\"#0084d8\"\n                                    activeDot={{ r: 8 }}\n                                />\n                                <Line\n                                    name=\"Healthcare System Capacity\"\n                                    type=\"monotone\"\n                                    dataKey=\"hypotheticalHealthCareCapacity\"\n                                    strokeOpacity={opacity.uv}\n                                    stroke=\"#ff84ff\"\n                                />\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n","export interface InputParams {\n    closeCircleSize: number\n    randomPeopleMetDaily: number\n    chanceOfDangerousContactWithCloseCirclePreSymptoms: number\n    chanceOfDangerousContactWithCloseCirclePostSymptoms: number\n    chanceOfDangerousContactWithRandomPeoplePreSymptoms: number\n    chanceOfDangerousContactWithRandomPeoplePostSymptoms: number\n    dayWithoutSymptoms: number\n    dayWithSymptoms: number\n    entirePopulationSize: number\n    initialSickPopulation: number\n}\n\nexport enum PersonState {\n    NORMAL,\n    SICK,\n    POST_SICK\n}\n\nexport interface Person {\n    state: number\n    dayGotSick?: number\n}\n\nexport interface SimulationPoint {\n    activeCaseCount: number\n    totalCases: number\n}\n","import { InputParams, Person, PersonState } from './Models'\n\nexport default class Calculator {\n    people: Person[] = []\n    dayNow: number = 0\n\n    constructor(private inputParams: InputParams) {\n        inputParams.chanceOfDangerousContactWithCloseCirclePostSymptoms /= 100.0\n        inputParams.chanceOfDangerousContactWithCloseCirclePreSymptoms /= 100.0\n        inputParams.chanceOfDangerousContactWithRandomPeoplePostSymptoms /= 100.0\n        inputParams.chanceOfDangerousContactWithRandomPeoplePreSymptoms /= 100.0\n\n        for (let index = 0; index < inputParams.entirePopulationSize; index++) {\n            this.people.push({\n                state: PersonState.NORMAL\n            })\n        }\n\n        for (let index = 0; index < inputParams.initialSickPopulation; index++) {\n            const randomPerson = this.people[this.getRandomBound(0, inputParams.entirePopulationSize)]\n            randomPerson.state = PersonState.SICK\n            randomPerson.dayGotSick = 0\n        }\n    }\n\n    getRandomBound(startInclusive: number, endExclusive: number) {\n        return Math.floor(Math.random() * (endExclusive - startInclusive) + startInclusive)\n    }\n\n    runOneDay() {\n        this.dayNow = this.dayNow + 1\n        for (let index = 0; index < this.inputParams.entirePopulationSize; index++) {\n            if (this.people[index].state === PersonState.SICK) {\n                this.runOneDayForPatient(index)\n            }\n        }\n    }\n\n    private makePersonSick(closeIndex: number) {\n        this.people[closeIndex].state = PersonState.SICK\n        this.people[closeIndex].dayGotSick = this.dayNow\n    }\n\n    private runOneDayForPatient(patientIndex: number) {\n        const closeCircleSizePlusOne = this.inputParams.closeCircleSize + 1\n        const daysGotSick = this.people[patientIndex].dayGotSick\n        if (daysGotSick !== 0 && !daysGotSick) {\n            throw new Error('Patient should be sick!')\n        }\n\n        for (let index = 0; index < closeCircleSizePlusOne; index++) {\n            let closeIndex = patientIndex - Math.floor(closeCircleSizePlusOne / 2) + index\n\n            if (closeIndex === patientIndex) {\n                continue\n            }\n\n            if (closeIndex < 0) {\n                closeIndex = closeIndex + this.inputParams.entirePopulationSize\n            }\n\n            if (closeIndex >= this.inputParams.entirePopulationSize) {\n                closeIndex = closeIndex - this.inputParams.entirePopulationSize\n            }\n\n            if (this.people[closeIndex].state === PersonState.NORMAL) {\n                // yikes!\n\n                if (daysGotSick + this.inputParams.dayWithoutSymptoms > this.dayNow) {\n                    // before symptoms\n                    if (Math.random() < this.inputParams.chanceOfDangerousContactWithCloseCirclePreSymptoms) {\n                        this.makePersonSick(closeIndex)\n                    }\n                } else {\n                    // after symptoms\n                    if (Math.random() < this.inputParams.chanceOfDangerousContactWithCloseCirclePostSymptoms) {\n                        this.makePersonSick(closeIndex)\n                    }\n                }\n            }\n        }\n\n        for (let index = 0; index < this.inputParams.randomPeopleMetDaily; index++) {\n            const indexInDanger = this.getRandomBound(0, this.inputParams.entirePopulationSize)\n\n            if (this.people[indexInDanger].state === PersonState.NORMAL) {\n                // yikes!\n\n                if (daysGotSick + this.inputParams.dayWithoutSymptoms > this.dayNow) {\n                    // before symptoms\n                    if (Math.random() < this.inputParams.chanceOfDangerousContactWithRandomPeoplePreSymptoms) {\n                        this.makePersonSick(indexInDanger)\n                    }\n                } else {\n                    // after symptoms\n                    if (Math.random() < this.inputParams.chanceOfDangerousContactWithRandomPeoplePostSymptoms) {\n                        this.makePersonSick(indexInDanger)\n                    }\n                }\n            }\n        }\n\n        if (this.dayNow === this.inputParams.dayWithSymptoms + this.inputParams.dayWithoutSymptoms + daysGotSick) {\n            this.people[patientIndex].state = PersonState.POST_SICK\n        }\n    }\n}\n","import { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport React from 'react'\n\nexport default class ModelDescription extends Component<any, any> {\n    render() {\n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <h3>A Simple Monte Carlo Take on Coronavirus Community Spread</h3>\n                        <p>\n                            The model is open source and the source code is available on{' '}\n                            <a\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                                href=\"https://github.com/githubsaturn/covid19-spread-simulator\"\n                                aria-label=\"Star on GitHub\"\n                            >\n                                GitHub\n                            </a>\n                        </p>\n\n                        <iframe\n                            title=\"GitHub button\"\n                            src=\"https://ghbtns.com/github-btn.html?user=githubsaturn&repo=covid19-spread-simulator&type=star&count=false&size=large\"\n                            scrolling=\"0\"\n                            frameBorder={0}\n                            width=\"160px\"\n                            height=\"30px\"\n                        ></iframe>\n                        <div style={{ height: 30 }} />\n                        <p>\n                            This model uses a simple Monte Carlo approach to simulate what happens in a community and how the virus gets\n                            people infected. This model runs random numbers for each day and based on randomized numbers it decides whether\n                            or not an individual is infected. Since the basis of this model is based on Monte Carlo method, we need to run\n                            the simulation many times and calculate the average. For the purpose of this browser based simulator, a total\n                            population of 5000 is being simulated for 150 days. The simulation gets repeated 10 times and the average\n                            numbers will be plotted on the graph.\n                        </p>\n                        <p>The input to this model are as follows:</p>\n                        <ul>\n                            {this.createInputDescription(\n                                'Close Circle Size',\n                                'Simply the average number of close contacts that a person has'\n                            )}\n                            {this.createInputDescription(\n                                'Random People Met Daily',\n                                'Simply the average number of random people that a person meets per day'\n                            )}\n                            {this.createInputDescription(\n                                'Infected days without symptoms',\n                                'The number of days that an infected person is infectious before displaying any symptoms'\n                            )}\n                            {this.createInputDescription(\n                                'Infected days after showing symptoms',\n                                'The number of days that the patient remains infectious after displaying symptoms'\n                            )}\n                            {this.createInputDescription(\n                                'Chance of infecting close contact before becoming symptomatic PER DAY',\n                                'This indicates the chance of infecting a close contact person per day before displaying symptoms. For example, if the chance is 20% per day, the chance of infecting this person eventually over a span of 14 days, for example, is 1 - 0.8^14, or 95%.'\n                            )}\n                            {this.createInputDescription(\n                                'Chance of infecting close contact after becoming symptomatic PER DAY',\n                                'Similar to above, except, this is an indicator for the chance \"after being symptomatic\". This essentially a lower number due to the natural extra care taken by people when they are sick such as being more careful to not spread the germs'\n                            )}\n                            {this.createInputDescription(\n                                'Chance of infecting random contact before becoming symptomatic PER DAY',\n                                'Similar to the close circle one, except this is for random people, like a person sitting next to you on subway. This is essentially a lower number as there is a lower chance of you making a risky contact with a random person. Usually the non close contact risk comes from touching the same objects, such as hand rails and etc.'\n                            )}\n                            {this.createInputDescription(\n                                'Chance of infecting random person after symptoms PER DAY',\n                                'Similar to the previous one, except this is for after being symptomatic. This is the lowest number as, usually, when people get sick they avoid going to public'\n                            )}\n                        </ul>\n                        <p>DISCLAIMER: This model is only for demonstration only and it has not been clinically verified.</p>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n\n    createInputDescription(title: string, description: string) {\n        return (\n            <li>\n                <h3>{title}:</h3>\n                <p>{description}</p>\n            </li>\n        )\n    }\n}\n","import React, { RefObject, Component } from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { Row, Button, Col } from 'antd'\nimport * as GlobalActions from '../redux/actions/GlobalActions'\nimport { connect } from 'react-redux'\nimport InputDataForm from './InputDataForm'\nimport DataChart from './DataChart'\nimport { InputParams, PersonState, SimulationPoint } from '../calculator/Models'\nimport Utils from '../utils/Utils'\nimport Calculator from '../calculator/Calculator'\nimport ModelDescription from './ModelDescription'\n\nconst ENTIRE_SIZE = 5000\nconst TOTAL_DAYS = 150\nconst TOTAL_SIMULATIONS = 10\n\ninterface RootPageInterface extends RouteComponentProps<any> {\n    rootElementKey: string\n    emitSizeChanged: () => void\n    isMobile: boolean\n}\n\nclass PageRoot extends Component<\n    RootPageInterface,\n    {\n        collapsed: boolean\n        formInputData: InputParams\n        sickCountAtDay: SimulationPoint[]\n    }\n> {\n    private mainContainer: RefObject<HTMLDivElement>\n\n    constructor(props: any) {\n        super(props)\n        this.mainContainer = React.createRef()\n        this.state = {\n            sickCountAtDay: [],\n            collapsed: false,\n            formInputData: {\n                closeCircleSize: 2,\n                randomPeopleMetDaily: 2,\n                chanceOfDangerousContactWithCloseCirclePreSymptoms: 25,\n                chanceOfDangerousContactWithCloseCirclePostSymptoms: 5,\n                chanceOfDangerousContactWithRandomPeoplePreSymptoms: 2,\n                chanceOfDangerousContactWithRandomPeoplePostSymptoms: 1,\n                dayWithoutSymptoms: 4,\n                dayWithSymptoms: 10,\n                entirePopulationSize: ENTIRE_SIZE,\n                initialSickPopulation: 5\n            }\n        }\n\n        setTimeout(() => {\n            this.runSimulation()\n        }, 700)\n    }\n\n    updateDimensions = () => this.props.emitSizeChanged()\n\n    componentWillUnmount() {\n        if (super.componentWillUnmount) {\n            super.componentWillUnmount()\n        }\n        this.updateDimensions()\n        window.removeEventListener('resize', this.updateDimensions)\n    }\n\n    componentDidUpdate(prevProps: any) {\n        // Typical usage (don't forget to compare props):\n        if (this.props.location.pathname !== prevProps.location.pathname && this.props.isMobile) {\n            this.setState({ collapsed: true })\n        }\n    }\n\n    componentDidMount() {\n        this.updateDimensions()\n        window.addEventListener('resize', this.updateDimensions)\n    }\n\n    runSimulation() {\n        const self = this\n\n        const simulationRuns: any = []\n\n        for (let i = 0; i < TOTAL_SIMULATIONS; i++) {\n            const calculator = new Calculator(Utils.copyObject(self.state.formInputData))\n            for (let index = 0; index < TOTAL_DAYS; index++) {\n                calculator.runOneDay()\n                const sickPeopleCount =\n                    ENTIRE_SIZE -\n                    calculator.people.filter(it => {\n                        return it.state === PersonState.NORMAL\n                    }).length\n                simulationRuns.push({ day: calculator.dayNow, sickPeopleCount })\n            }\n        }\n\n        const sumSickAtDay: number[] = []\n\n        for (let index = 0; index < TOTAL_DAYS; index++) {\n            simulationRuns.forEach((element: any) => {\n                if (element.day === index + 1) {\n                    sumSickAtDay[index] = (sumSickAtDay[index] ? sumSickAtDay[index] : 0) + element.sickPeopleCount\n                }\n            })\n        }\n\n        const avgAtDay: number[] = sumSickAtDay.map(it => {\n            return (it / TOTAL_SIMULATIONS) * (100 / ENTIRE_SIZE)\n        })\n\n        const newAtDay: number[] = []\n        for (let index = 0; index < avgAtDay.length; index++) {\n            const element = avgAtDay[index]\n\n            if (index === 0) {\n                newAtDay.push(element)\n                continue\n            }\n\n            newAtDay.push(Math.max(0, element - avgAtDay[index - 1]))\n        }\n\n        while (avgAtDay.length) {\n            avgAtDay.pop()\n        }\n\n        for (let index = 0; index < newAtDay.length; index++) {\n            const before = index > 0 ? avgAtDay[index - 1] : 0\n            avgAtDay.push(newAtDay[index] + before)\n        }\n\n        const simulationResult: SimulationPoint[] = []\n\n        const totalSickDays = self.state.formInputData.dayWithSymptoms + self.state.formInputData.dayWithoutSymptoms\n\n        for (let index = 0; index < newAtDay.length; index++) {\n            const element = avgAtDay[index]\n            simulationResult.push({\n                totalCases: element,\n                activeCaseCount: element - (index >= totalSickDays ? avgAtDay[index - totalSickDays] : 0)\n            })\n        }\n\n        self.setState({ sickCountAtDay: simulationResult })\n    }\n\n    render() {\n        const self = this\n        const formInputData = self.state.formInputData\n        return (\n            <div\n                key={self.props.rootElementKey}\n                ref={self.mainContainer}\n                style={{\n                    padding: self.props.isMobile ? 10 : 35\n                }}\n            >\n                <Row type=\"flex\" justify=\"center\">\n                    <h2>Coronavirus Spread Simulator</h2>\n                </Row>\n                <Row type=\"flex\" justify=\"center\">\n                    <p>\n                        <small>\n                            <i>\n                                The model is{' '}\n                                <a\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                    href=\"https://github.com/githubsaturn/covid19-spread-simulator\"\n                                    aria-label=\"Star on GitHub\"\n                                >\n                                    open-sourced\n                                </a>\n                                . See model description and disclaimer below.\n                            </i>\n                        </small>\n                    </p>\n                </Row>\n                <Row type=\"flex\" justify=\"center\">\n                    <Col lg={{ span: 10 }}>\n                        <p>\n                            The goal of this model is to show how easy it is to completely overwhelm the healthcare system and cause tens of\n                            thousands of lives being compromised. Simply change random people met daily from 2 to 3 and observe the load on\n                            healthcare system!\n                        </p>\n                        <p>\n                            <b>REMEMBER:</b> The goal is to flatten the curve! If you aren't unsure why, this{' '}\n                            <a\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                                href=\"https://www.npr.org/sections/health-shots/2020/03/13/815502262/flattening-a-pandemics-curve-why-staying-home-now-can-save-lives\"\n                            >\n                                article\n                            </a>{' '}\n                            explains why this is extremely crucial now.\n                        </p>\n                    </Col>\n                </Row>\n\n                <div style={{ height: 30 }} />\n\n                <InputDataForm\n                    updateModel={data => {\n                        self.setState({ formInputData: Utils.copyObject(data) })\n                    }}\n                    formInputData={formInputData}\n                />\n                <div style={{ height: 10 }} />\n                <Row type=\"flex\" align=\"middle\" justify=\"center\">\n                    <Button\n                        onClick={() => {\n                            self.runSimulation()\n                        }}\n                        type=\"primary\"\n                        shape=\"round\"\n                        icon=\"bar-chart\"\n                        size=\"large\"\n                    >\n                        Recalculate\n                    </Button>\n                </Row>\n                <div style={{ height: 30 }} />\n                <DataChart sickCountAtDay={self.state.sickCountAtDay} />\n                <div style={{ height: 80 }} />\n\n                <ModelDescription />\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state: any) {\n    return {\n        rootElementKey: state.globalReducer.rootElementKey,\n        isMobile: state.globalReducer.isMobile\n    }\n}\n\nexport default connect(mapStateToProps, {\n    emitSizeChanged: GlobalActions.emitSizeChanged\n})(PageRoot)\n","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Route, Switch, HashRouter } from 'react-router-dom'\nimport thunk from 'redux-thunk'\n\nimport './App.css'\n\nimport reducers from './redux/reducers'\nimport PageRoot from './containers/PageRoot'\n\nconst createStoreWithMiddleware = applyMiddleware(thunk)(createStore)\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Provider store={createStoreWithMiddleware(reducers)}>\n                    <HashRouter>\n                        <Switch>\n                            <Route path=\"/\" component={PageRoot} />\n                        </Switch>\n                    </HashRouter>\n                </Provider>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}